// T6 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool
#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\gametypes_zm\_hud_util;
#include maps\mp\_ballistic_knife;
#include maps\mp\_challenges;
#include maps\mp\gametypes_zm\_globallogic_player;
#include maps\mp\gametypes_zm\_damagefeedback;
#include maps\mp\gametypes_zm\_globallogic_audio;

init()
{
/#
	debug = weapons_get_dvar_int( "scr_weaponobject_debug", "0" );
#/
	coneangle = weapons_get_dvar_int( "scr_weaponobject_coneangle", "70" );
	mindist = weapons_get_dvar_int( "scr_weaponobject_mindist", "20" );
	graceperiod = weapons_get_dvar( "scr_weaponobject_graceperiod", "0.6" );
	radius = weapons_get_dvar_int( "scr_weaponobject_radius", "192" );
	level thread onplayerconnect();
	level.watcherweapons = [];
	level.watcherweapons = getwatcherweapons();
	level.watcherweaponnames = [];
	level.watcherweaponnames = getwatchernames( level.watcherweapons );
	level.retrievableweapons = [];
	level.retrievableweapons = getretrievableweapons();
	level.retrievableweaponnames = [];
	level.retrievableweaponnames = getwatchernames( level.retrievableweapons );
	level.weaponobjectexplodethisframe = 0;
}

getwatchernames( weapons )
{
	names = [];

	foreach ( index, weapon in weapons )
		names[index] = getsubstr( weapon, 0, weapon.size - 3 );

	return names;
}

weapons_get_dvar_int( dvar, def )
{
	return int( weapons_get_dvar( dvar, def ) );
}

weapons_get_dvar( dvar, def )
{
	if ( getdvar( dvar ) != "" )
		return getdvarfloat( dvar );
	else
	{
		setdvar( dvar, def );
		return def;
	}
}

setupretrievablehintstrings()
{
	createretrievablehint( "claymore", &"MP_CLAYMORE_PICKUP" );
}

onplayerconnect()
{
	level thread [[ level._weaponobjects_on_player_connect_override ]]();
}

createbasewatchers()
{
	foreach ( index, weapon in level.watcherweapons )
		self createweaponobjectwatcher( level.watcherweaponnames[index], weapon, self.team );

	foreach ( index, weapon in level.retrievableweapons )
		self createweaponobjectwatcher( level.retrievableweaponnames[index], weapon, self.team );
}

setupretrievablewatcher()
{
	for ( i = 0; i < level.retrievableweapons.size; i++ )
	{
		watcher = getweaponobjectwatcherbyweapon( level.retrievableweapons[i] );

		if ( !isdefined( watcher.onspawnretrievetriggers ) )
			watcher.onspawnretrievetriggers = ::onspawnretrievableweaponobject;

		if ( !isdefined( watcher.ondestroyed ) )
			watcher.ondestroyed = ::ondestroyed;

		if ( !isdefined( watcher.pickup ) )
			watcher.pickup = ::pickup;
	}
}

voidonspawn( unused0, unused1 )
{

}

deleteweaponobjectarray()
{
	if ( isdefined( self.objectarray ) )
	{
		for ( i = 0; i < self.objectarray.size; i++ )
		{
			if ( isdefined( self.objectarray[i] ) )
				self.objectarray[i] delete();
		}
	}

	self.objectarray = [];
}

waitanddetonate( object, delay, attacker, weaponname )
{
	object endon( "death" );
	from_emp = 0;

	if ( from_emp )
	{
		object setclientflag( 15 );
		object setclientflag( 9 );
		object.stun_fx = 1;

		playfx( level._equipment_emp_destroy_fx, object.origin + vectorscale( ( 0, 0, 1 ), 5.0 ), ( 0, randomfloat( 360 ), 0 ) );

		delay = 1.1;
	}

	if ( delay )
		wait( delay );

	if ( isdefined( object.detonated ) && object.detonated == 1 )
		return;

	if ( !isdefined( self.detonate ) )
		return;

	object.detonated = 1;
	object [[ self.detonate ]]( attacker, weaponname );
}

detonateweaponobjectarray( forcedetonation, weapon )
{
	undetonated = [];

	if ( isdefined( self.objectarray ) )
	{
		for ( i = 0; i < self.objectarray.size; i++ )
		{
			if ( isdefined( self.objectarray[i] ) )
			{
				if ( self.objectarray[i] isstunned() && forcedetonation == 0 )
				{
					undetonated[undetonated.size] = self.objectarray[i];
					continue;
				}

				self thread waitanddetonate( self.objectarray[i], 0.1, undefined, weapon );
			}
		}
	}

	self.objectarray = undetonated;
}

addweaponobject( watcher, weapon )
{
	if ( !isdefined( watcher.storedifferentobject ) )
		watcher.objectarray[watcher.objectarray.size] = weapon;

	weapon.owner = self;
	weapon.detonated = 0;
	weapon.name = watcher.weapon;

	if ( isdefined( watcher.ondamage ) )
		weapon thread [[ watcher.ondamage ]]( watcher );
	else
		weapon thread weaponobjectdamage( watcher );

	if ( isdefined( watcher.onspawn ) )
		weapon thread [[ watcher.onspawn ]]( watcher, self );

	if ( isdefined( watcher.onspawnfx ) )
		weapon thread [[ watcher.onspawnfx ]]();

	if ( isdefined( watcher.onspawnretrievetriggers ) )
		weapon thread [[ watcher.onspawnretrievetriggers ]]( watcher, self );

	weapon thread deleteonkillbrush( self );
}

deleteweaponobjecthelper( weapon_ent )
{
	if ( !isdefined( weapon_ent.name ) )
		return;

	watcher = self getweaponobjectwatcherbyweapon( weapon_ent.name );

	if ( !isdefined( watcher ) )
		return;

	watcher.objectarray = deleteweaponobject( watcher, weapon_ent );
}

deleteweaponobject( watcher, weapon_ent )
{
	temp_objectarray = watcher.objectarray;
	watcher.objectarray = [];
	j = 0;

	for ( i = 0; i < temp_objectarray.size; i++ )
	{
		if ( !isdefined( temp_objectarray[i] ) || temp_objectarray[i] == weapon_ent )
			continue;

		watcher.objectarray[j] = temp_objectarray[i];
		j++;
	}

	return watcher.objectarray;
}

weaponobjectdamage( watcher )
{
	self endon( "death" );
	self setcandamage( 1 );
	self.maxhealth = 100000;
	self.health = self.maxhealth;
	attacker = undefined;

	while ( true )
	{
		self waittill( "damage", damage, attacker, direction_vec, point, type, modelname, tagname, partname, weaponname, idflags );

		if ( !isplayer( attacker ) && isdefined( attacker.owner ) )
			attacker = attacker.owner;

		if ( level.teambased && isplayer( attacker ) )
		{
			if ( self.owner.team == attacker.pers["team"] && self.owner != attacker )
				continue;
		}

		if ( !isvehicle( self ) && !friendlyfirecheck( self.owner, attacker ) )
			continue;

		break;
	}

	if ( level.weaponobjectexplodethisframe )
		wait( 0.1 + randomfloat( 0.4 ) );
	else
		wait 0.05;

	if ( !isdefined( self ) )
		return;

	level.weaponobjectexplodethisframe = 1;
	thread resetweaponobjectexplodethisframe();

	if ( isdefined( type ) && ( issubstr( type, "MOD_GRENADE_SPLASH" ) || issubstr( type, "MOD_GRENADE" ) || issubstr( type, "MOD_EXPLOSIVE" ) ) )
		self.waschained = 1;

	if ( isdefined( idflags ) && idflags & level.idflags_penetration )
		self.wasdamagedfrombulletpenetration = 1;

	self.wasdamaged = 1;
	watcher thread waitanddetonate( self, 0.0, attacker, weaponname );
}

isstunned()
{
	return isdefined( self.stun_fx );
}

resetweaponobjectexplodethisframe()
{
	wait 0.05;
	level.weaponobjectexplodethisframe = 0;
}

getweaponobjectwatcher( name )
{
	if ( !isdefined( level.weaponobjectwatcherarray ) )
		return undefined;

	if ( isdefined( level.weaponobjectwatcherarray[name] ) )
		return level.weaponobjectwatcherarray[name];

	return undefined;
}

getweaponobjectwatcherbyweapon( weapon )
{
	if ( !isdefined( level.weaponobjectwatcherarray ) )
		return undefined;

	keys = getarraykeys( level.weaponobjectwatcherarray );
	foreach ( watcher in keys )
	{
		if ( isdefined( level.weaponobjectwatcherarray[watcher].weapon ) && level.weaponobjectwatcherarray[watcher].weapon == weapon )
			return level.weaponobjectwatcherarray[watcher];
	}

	return undefined;
}

resetweaponobjectwatcher( watcher, ownerteam )
{
	watcher.ownerteam = ownerteam;
}

createweaponobjectwatcher( name, weapon, ownerteam )
{
	if ( !isdefined( level.weaponobjectwatcherarray ) )
		level.weaponobjectwatcherarray = [];

	weaponobjectwatcher = getweaponobjectwatcher( name );

	if ( !isdefined( weaponobjectwatcher ) )
	{
		weaponobjectwatcher = spawnstruct();
		level.weaponobjectwatcherarray[name] = weaponobjectwatcher;
		weaponobjectwatcher.name = name;
		weaponobjectwatcher.type = "use";
		weaponobjectwatcher.weapon = weapon;
		weaponobjectwatcher.weaponidx = getweaponindexfromname( weapon );
		weaponobjectwatcher.pickupsound = getweaponpickupsound( weaponobjectwatcher.weaponidx );
		weaponobjectwatcher.pickupsoundplayer = getweaponpickupsoundplayer( weaponobjectwatcher.weaponidx );
		weaponobjectwatcher.onspawn = undefined;
		weaponobjectwatcher.onspawnfx = undefined;
		weaponobjectwatcher.onspawnretrievetriggers = undefined;
		weaponobjectwatcher.ondetonated = undefined;
		weaponobjectwatcher.detonate = undefined;
		weaponobjectwatcher.stun = undefined;
		weaponobjectwatcher.ondestroyed = undefined;
		if ( !isdefined( weaponobjectwatcher.objectarray ) )
			weaponobjectwatcher.objectarray = [];
		if ( !isdefined( weaponobjectwatcher.subscribers ) )
		{
			weaponobjectwatcher.subscribers = [];
		}

		weaponobjectwatcher.subscribers[ self getentitynumber() ] = self;
	}

	self resetweaponobjectwatcher( weaponobjectwatcher, ownerteam );
	return weaponobjectwatcher;
}

createuseweaponobjectwatcher( name, weapon, ownerteam )
{
	weaponobjectwatcher = createweaponobjectwatcher( name, weapon, ownerteam );
	weaponobjectwatcher.type = "use";
	weaponobjectwatcher.onspawn = ::onspawnuseweaponobject;
	return weaponobjectwatcher;
}

onspawnuseweaponobject( watcher, owner )
{
}

watchweaponobjectusage()
{
	self endon( "disconnect" );

	self thread watchweaponobjectspawn();
	self thread watchweaponprojectileobjectspawn();
	self thread deleteweaponobjectson();
}

watchweaponobjectspawn()
{
	self notify( "watchWeaponObjectSpawn" );
	self endon( "watchWeaponObjectSpawn" );
	self endon( "disconnect" );

	while ( true )
	{
		self waittill( "grenade_fire", weapon, weapname );

		watcher = getweaponobjectwatcherbyweapon( weapname );

		if ( isdefined( watcher ) )
			self addweaponobject( watcher, weapon );
	}
}

watchweaponprojectileobjectspawn()
{
	self endon( "disconnect" );

	while ( true )
	{
		self waittill( "missile_fire", weapon, weapname );
		watcher = getweaponobjectwatcherbyweapon( weapname );

		if ( isdefined( watcher ) )
		{
			self addweaponobject( watcher, weapon );
			objectarray_size = watcher.objectarray.size;

			for ( j = 0; j < objectarray_size; j++ )
			{
				if ( !isdefined( watcher.objectarray[j] ) )
					watcher.objectarray = deleteweaponobject( watcher, weapon );
			}

			if ( isdefined( watcher.detonate ) && watcher.objectarray.size > 1 )
				watcher thread waitanddetonate( watcher.objectarray[0], 0.1 );
		}
	}
}

proximityweaponobjectdebug( watcher )
{
/#
	self waittillnotmoving();
	self thread showcone( acos( watcher.detectiondot ), watcher.detonateradius, ( 1, 0.85, 0 ) );
	self thread showcone( 60, 256, ( 1, 0, 0 ) );
#/
}

vectorcross( v1, v2 )
{
/#
	return ( v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0] );
#/
}

showcone( angle, range, color )
{
/#
	self endon( "death" );
	start = self.origin;
	forward = anglestoforward( self.angles );
	right = vectorcross( forward, ( 0, 0, 1 ) );
	up = vectorcross( forward, right );
	fullforward = forward * range * cos( angle );
	sideamnt = range * sin( angle );

	while ( true )
	{
		prevpoint = ( 0, 0, 0 );

		for ( i = 0; i <= 20; i++ )
		{
			coneangle = i / 20.0 * 360;
			point = start + fullforward + sideamnt * ( right * cos( coneangle ) + up * sin( coneangle ) );

			if ( i > 0 )
			{
				line( start, point, color );
				line( prevpoint, point, color );
			}

			prevpoint = point;
		}

		wait 0.05;
	}
#/
}

ishacked()
{
	return false;
}

deleteonkillbrush( player )
{
	player endon( "disconnect" );
	self endon( "death" );
	self endon( "stationary" );
	killbrushes = getentarray( "trigger_hurt", "classname" );

	while ( true )
	{
		for ( i = 0; i < killbrushes.size; i++ )
		{
			if ( self istouching( killbrushes[i] ) )
			{
				if ( self.origin[2] > player.origin[2] )
					break;

				if ( isdefined( self ) )
					self delete();

				return;
			}
		}

		wait 0.1;
	}
}

deleteweaponobjectson()
{
	while ( true )
	{
		msg = self waittill_any_return( "disconnect", "joined_team", "joined_spectators" );

		if ( !isdefined( level.weaponobjectwatcherarray ) )
			return;

		watchers = [];

		keys = getarraykeys( level.weaponobjectwatcherarray );
		foreach ( watcher in keys )
		{
			weaponobjectwatcher = spawnstruct();
			watchers[watcher] = weaponobjectwatcher;
			weaponobjectwatcher.objectarray = [];

			if ( isdefined( level.weaponobjectwatcherarray[watcher].objectarray ) )
				weaponobjectwatcher.objectarray = level.weaponobjectwatcherarray[watcher].objectarray;
		}

		wait 0.05;

		keys = getarraykeys( level.weaponobjectwatcherarray );
		foreach ( watcher in keys )
			watchers[watcher] deleteweaponobjectarray();

		if ( msg == "disconnect" )
			return;
	}
}

saydamaged( orig, amount )
{
/#
	for ( i = 0; i < 60; i++ )
	{
		print3d( orig, "damaged! " + amount );
		wait 0.05;
	}
#/
}

friendlyfirecheck( owner, attacker, forcedfriendlyfirerule )
{
	if ( !isdefined( owner ) )
		return true;

	if ( !level.teambased )
		return true;

	friendlyfirerule = level.friendlyfire;

	if ( isdefined( forcedfriendlyfirerule ) )
		friendlyfirerule = forcedfriendlyfirerule;

	if ( friendlyfirerule != 0 )
		return true;

	if ( attacker == owner )
		return true;

	if ( isplayer( attacker ) )
	{
		if ( !isdefined( attacker.pers["team"] ) )
			return true;

		if ( attacker.pers["team"] != owner.pers["team"] )
			return true;
	}
	else if ( isai( attacker ) )
	{
		if ( attacker.aiteam != owner.pers["team"] )
			return true;
	}
	else if ( isvehicle( attacker ) )
	{
		if ( isdefined( attacker.owner ) && isplayer( attacker.owner ) )
		{
			if ( attacker.owner.pers["team"] != owner.pers["team"] )
				return true;
		}
	}

	return false;
}

onspawnretrievableweaponobject( watcher, player )
{
	self endon( "death" );

	self setowner( player );
	self setteam( player.pers["team"] );
	self.owner = player;
	self.oldangles = self.angles;
	self waittillnotmoving();

	if ( isdefined( watcher.activationdelay ) )
		wait( watcher.activationdelay );

	waittillframeend;

	triggerorigin = self.origin;
	triggerparentent = undefined;

	if ( isdefined( triggerparentent ) )
		triggerorigin = triggerparentent.origin + vectorscale( ( 0, 0, 1 ), 10.0 );
	else
	{
		up = anglestoup( self.angles );
		triggerorigin = self.origin + up;
	}

	if ( isdefined( watcher.adjusttriggerorigin ) )
		triggerorigin = self [[ watcher.adjusttriggerorigin ]]( triggerorigin );

	self.pickuptrigger = spawn( "trigger_radius_use", triggerorigin );
	self.pickuptrigger sethintlowpriority( 1 );
	self.pickuptrigger setcursorhint( "HINT_NOICON", self );
	self.pickuptrigger enablelinkto();
	self.pickuptrigger linkto( self );
	self.pickuptrigger setinvisibletoall();
	self.pickuptrigger setvisibletoplayer( player );

	if ( isdefined( level.retrievehints[watcher.name] ) )
		self.pickuptrigger sethintstring( level.retrievehints[watcher.name].hint );
	else
		self.pickuptrigger sethintstring( &"MP_GENERIC_PICKUP" );

	if ( level.teambased )
		self.pickuptrigger setteamfortrigger( player.pers["team"] );
	else
		self.pickuptrigger setteamfortrigger( "none" );

	if ( isdefined( triggerparentent ) )
		self.pickuptrigger linkto( triggerparentent );

	self thread watchusetrigger( self.pickuptrigger, watcher.pickup, watcher.pickupsoundplayer, watcher.pickupsound );

	if ( isdefined( watcher.pickup_trigger_listener ) )
		self thread [[ watcher.pickup_trigger_listener ]]( self.pickuptrigger, player );

	self thread watchshutdown( player );
}

destroyent()
{
	self delete();
}

ondestroyed( attacker )
{
	playfx( level._effect["tacticalInsertionFizzle"], self.origin );
	self playsound( "dst_tac_insert_break" );
	self delete();
}

watchshutdown( player )
{
	self waittill( "death" );
	pickuptrigger = self.pickuptrigger;
	enemytrigger = self.enemytrigger;

	if ( isdefined( pickuptrigger ) )
		pickuptrigger delete();

	if ( isdefined( enemytrigger ) )
		enemytrigger delete();
}

watchusetrigger( trigger, callback, playersoundonuse, npcsoundonuse )
{
	self endon( "delete" );

	while ( true )
	{
		trigger waittill( "trigger", player );

		if ( !isalive( player ) )
			continue;

		if ( !player isonground() )
			continue;

		if ( isdefined( trigger.triggerteam ) && player.pers["team"] != trigger.triggerteam )
			continue;

		if ( isdefined( trigger.triggerteamignore ) && player.team == trigger.triggerteamignore )
			continue;

		if ( isdefined( trigger.claimedby ) && player != trigger.claimedby )
			continue;

		grenade = player.throwinggrenade;
		isequipment = isweaponequipment( player getcurrentweapon() );

		if ( isdefined( isequipment ) && isequipment )
			grenade = 0;

		if ( player usebuttonpressed() && !grenade && !player meleebuttonpressed() )
		{
			if ( isdefined( playersoundonuse ) )
				player playlocalsound( playersoundonuse );

			if ( isdefined( npcsoundonuse ) )
				player playsound( npcsoundonuse );

			self thread [[ callback ]]( player );
		}
	}
}

createretrievablehint( name, hint )
{
	retrievehint = spawnstruct();
	retrievehint.name = name;
	retrievehint.hint = hint;
	level.retrievehints[name] = retrievehint;
}

pickup( player )
{
	if ( isdefined( self.owner ) && self.owner != player )
		return;

	self.playdialog = 0;
	self destroyent();
	player giveweapon( self.name );
	clip_ammo = player getweaponammoclip( self.name );
	clip_max_ammo = weaponclipsize( self.name );

	if ( clip_ammo < clip_max_ammo )
		clip_ammo++;

	player setweaponammoclip( self.name, clip_ammo );
}

unsubscribe_from_watcher( watcher )
{
	if ( !isdefined( level.weaponobjectwatcherarray[ watcher ] ) )
	{
		assert( false );
		return;
	}
	
	if ( !isdefined( level.weaponobjectwatcherarray[ watcher ].subscribers[ self getentitynumber() ] ) )
	{
		assert( false );
		return;
	}

	level.weaponobjectwatcherarray[ watcher ].subscribers[ self getentitynumber() ] = undefined;
}